---
description: 
globs: 
alwaysApply: true
---
# Code Style and Structure

All code should follow these guidelines to ensure consistency, readability, and maintainability across the project.

## General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types
- Don't define a block in case of one line of code
- Only use 'const' functions within a 'function'

## Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix any custom React hooks with "use" (useUser, useAuth)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

## TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation
- Use type-only imports and exports

## File Structure

For components and modules, follow a consistent structure:
1. Imports (grouped by external, internal)
2. Type definitions
3. Constants and utilities 
4. Component/function definition
5. Export statement

## Examples

```typescript
// Good - Early return pattern
function validateUser(user: User) {
  if (!user.id) return { valid: false, error: 'Missing user ID' };
  if (!user.email) return { valid: false, error: 'Missing email' };
  
  return { valid: true };
}

// Good - Const map instead of enum
const UserRole = {
  ADMIN: 'admin',
  USER: 'user',
  GUEST: 'guest'
} as const;

type UserRole = typeof UserRole[keyof typeof UserRole];
```
