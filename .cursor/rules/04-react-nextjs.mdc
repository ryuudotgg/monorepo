---
description: 
globs: 
alwaysApply: true
---
# React 19 and Next.js 15 Best Practices

Follow these guidelines when working with React 19 and Next.js 15 applications.

## Component Architecture

- Favor React Server Components (RSC) where possible
- Export the component as default at the end of the file
- Only create 'function' components
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals
- Minimize global components in `apps`
  - Prefer to keep components under a `_components` directory in the folder of the page they are used in

## React 19 Compiler Features

- We no longer need to handle memoization in React 19
- We don't need 'useRef', you can declare components with the following types:
  - React.ComponentType<"div">
  - React.ComponentType<typeof Button>

## State Management

- Implement safe server actions with 'next-safe-action'
- Implement URL state management with 'nuqs'
- Minimize client-side state

## Next.js 15 Features

### Async Request APIs

```typescript
// Make sure to use the async versions of runtime APIs.
const cookieStore = await cookies();
const headersList = await headers();
const { isEnabled } = await draftMode();

// You can use the async params in layouts/pages.
const params = await props.params;
const searchParams = await props.searchParams;
```

### Data Fetching
- Fetch requests are no longer cached by default
- Use `cache: 'force-cache'` for specific cached requests
- Implement `fetchCache = 'default-cache'` for layout/page-level caching
- Use appropriate fetching methods (Server Components, tRPC, React Query)

### Route Handlers
```typescript
// This is how you can cache a route handler.
export const dynamic = 'force-static';

export async function GET(request: Request) {
  const params = await request.params;
  // ... Implementation
}
```

### Environment Variables

- Avoid using `process.env` in your code, use the `env.ts` file instead
- You can only define variables prefixed with `NEXT_PUBLIC_` in `client` and `shared` under the `env.ts` file

## Performance Optimizations

- Define a `loading.tsx` for Next.js pages using `Skeleton`'s that are structured similarly to the page content
- Use `next/font` for font optimization
- Configure `staleTimes` for client-side router cache
- Monitor Core Web Vitals
- Minimize component/page bundle size
